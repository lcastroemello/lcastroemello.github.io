/* hamburguer menu */
/* it is easier if you think about putting the menu on the screen as it should appear */
/* it is a white background with links to click and a shade on the rest of the website when you open the menu */
/* the shade on the rest of the website pops the menu that appears */
/*menu as a MODAL: UI box that appears on the screen and you have to deal with it before you can do anything else */
/* the idea is similar, you should't be able to click in any link outside the menu before you click the menu outside */

/* the content for both the white menu and the shade will go on the HTML */
#hamburguer-menu {
    position: fixed;
    /* positioning something IN THE WINDOW, not on the page. Absolute fixes it on the page, so if you scroll down, it shows what is outside its area */
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    /* that streches it to the entire page  */
    background-color: rgba(0, 0, 0, 0.35);
    /* a is alpha and it shows how opaque it is. It is a number between 0 and 1  */
    visibility: hidden;
    /* this is still taken up space, just invisible. When you use display: none; it does not happen. Even if just hidden, you cannot click on it, it ignores it. With opacity 0, then you have a clickable hidden link */
}

.on #hamburger-menu {
    visibility: visible;
}
/* when I do this, everytime hamburger-menu is within this class .on, its visibility should be on */
/* this means that this has an ancestor .on. In JS you can then just add that to body to activate all small stuff that have this on the code */

#menuItself {
    background-color: white;
    max-width: 400%;
    height: 100%;
    /* on the phone version, it is interesting to make it 50% or more. defining a max makes it a good size on big screens and no more than 50% on smaller screens */
    position: absolute;
    right: 0;
    /* that makes the menu appears on the right */
    padding: 20px;
}

#x {
    color: red;
    font-weight: 700;
    font-size: 26px;
    position: absolute;
    right: 0;
}

/* using the # as a href in a link in HTML directs it to a child page of the same page. It can be used to direct to the bottom, but it is not a very good way to have no link in it, as it creates history on your browser and may redirect your user to the top of th epage   */

/* you can use css transitions to make the menu slide from the right inside the screen when you click */
/* example image */
/* transitions and animations are different. Transitions take place over time and transition from one style to the other */
#cute {
    position: absolute;
    top: 0;
    left: 0;
    width: 200px;
    /* having the next parts here makes it possible to return it, meaning that every time there is a change in class, it will do a transition. If it is a one way thing, you can put it into the new class */
    transition-property: transform;
    /* this tells you which property shall be animated. If you use all, there is a transition for all the differences. */
    transition-duration: 3s;
}

#cute.funky {
    /* left: 300px; */
    transform: translateX(300px) rotate(0.5turn) scale(5);
    /* performs better than changing the left */
    /* rotate makes the image upsidedown in the end */
}

/* opacity and transform are super nice to animate, they transition very well */
/* with other properties, the browser have to calculate the position of other elements on the page. With this properties, this does not happen, therefore it works more efficiently */
/* it is the GPU in your computer that handles the animations with transitions, so it is a different area of your computer, making it more efficient than other animations */

/* .bla {
transition-timing-function:linear;
}
that makes it a constant speed instead of having a tiny slow out in the end of the movement*/
